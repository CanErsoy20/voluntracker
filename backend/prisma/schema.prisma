generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HelpCenter {
  id                Int      @id @default(autoincrement())
  name              String
  busiestHours      Json? // TODO: {start, end}
  openCloseInfo     Json? // TODO: {open, close}
  location          Json? // TODO: {lat, lon}
  contactInfo       Json? // TODO: {phone, address, email}
  additionalInfo    String?
  volunteerCapacity Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  volunteers       Volunteer[]
  neededVolunteers NeededVolunteer[]
  supply           Supply[]
  neededSupply     NeededSupply[]
}

// Supply model and supply related models

model Supply {
  id       Int @id @default(autoincrement())
  quantity Int

  supplyType SupplyType @relation(fields: [typeId], references: [id])
  typeId     Int

  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])
  helpCenterId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NeededSupply {
  id Int @id @default(autoincrement())

  quantity Int
  urgency  Int?

  supplyType SupplyType @relation(fields: [typeId], references: [id])
  typeId     Int

  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])
  helpCenterId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplyType {
  id Int @id @default(autoincrement())

  typeName String
  category String?

  supplyReferences       Supply[]
  neededSupplyReferences NeededSupply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User model and other user related models
model User {
  id Int @id @default(autoincrement())

  firstname String
  surname String
  email    String @unique
  phone    String? @unique
  password String

  userRole  UserRole?    @relation(fields: [roleId], references: [id])
  roleId    Int?

  volunteer Volunteer?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  id        Int    @id @default(autoincrement())
  role_name String // Volunteer, Admin, Superadmin, ...

  users       User[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id Int @id @default(autoincrement())

  roles RolePermission[]

  permissionName String // User will see
  permissionKey  String // Behind the scenes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePermission {
  id Int @id @default(autoincrement())

  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  role   UserRole @relation(fields: [roleId], references: [id])
  roleId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Volunteer {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int @unique

  // one-to-many relationship between Volunteer and VolunteerType
  volunteerType   VolunteerType @relation(fields: [volunteerTypeId], references: [id])
  volunteerTypeId Int

  // one-to-many relationship between HelpCenter and Volunteer
  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])
  helpCenterId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NeededVolunteer {
  id Int @id @default(autoincrement())

  quantity Int
  urgency  Int?

  // one-to-many relationship between NeededVolunteer and VolunteerType
  volunteerType   VolunteerType @relation(fields: [volunteerTypeId], references: [id])
  volunteerTypeId Int

  // one-to-many relationship between HelpCenter and NeededVolunteer
  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])
  helpCenterId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VolunteerType {
  id Int @id @default(autoincrement())

  typeName String
  category String

  volunteers       Volunteer[]
  neededVolunteers NeededVolunteer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
