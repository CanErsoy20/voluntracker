generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SupplyTypeEnum {
  // Food
  CannedVegetable
  CannedFruit
  Rice
  Pasta
  Bread
  Cereal
  InstantNoodle
  Biscuit
  Cracker
  EnergyBar
  Flour
  Sugar
  Salt
  Spice
  CookingOil
  ProteinBar

  // Drink
  InfantMilk
  BottledWater
  Tea
  Coffee
  FruitJuice
  VegetableJuice

  // MedicalSupply
  Bandage
  Gauze
  AntisepticWipes
  DisposableGloves
  FaceMasks
  SterileSyringes
  Tourniquet
  FirstAidKit
  PrescriptionMedications
  OxygenTank
  Thermometer
  Epipen
  Antiacid

  // ShelterMaterial
  Blanket
  SleepingBag
  Tent

  // Clothing
  Tshirt
  Sweatshirt
  Pants
  Short
  Underwear
  Sock
  Shoe
  Sandal
  Boot
  Raincoat
  WinterCoat
  Hat
  Glove
  Scarve
  Sunglass
  Belt
  Pajama
  Bathrobe

  // PersonalHygieneProducts
  Soap
  Shampoo
  Toothbrush
  Toothpaste
  DentalFloss
  Razor
  ShavingCream
  Deodorant
  Tissue
  ToiletPaper
  WetWipe
  InsectRepellant
  ContactLensSolution
  NailClipper
  Pad
  Tampon

  // ToolsAndEquipment
  Hammer
  Screwdriver
  Wrench
  Plier
  Handsaw
  Axe
  Shovel
  Rake
  Whellbarrow
  Crowbar
  WireCutter
  UtilityKnife
  DuctTape
  Rope
  Chainsaw
  Nail
  Fuel

  // CommunicationDevices
  PortableRadio
  SattelitePhone
  CellPhone
  EmergencyWhistle
  PortableWifiHotspot

  // CleaningProducts
  Bleach
  DisinfectantWipe
  TrashBag
  Mop
  Broom
  Dustpan
  Sponge
  Bucket
  MicrofiberCloths

  // PowerSources
  Battery
  Generator
  PowerBank

  // CookingSupplies
  PortableStove
  PropaneTank
  CampingCookwareSet
  Spatula
  Plate
  Bowl
  Fork
  Knive
  Spoon
  PaperPlate
  PlasticUtensil
  CanOpener

  // EducationalMaterials
  ChildrenBook
  Book

  // AnimalSupplies
  AnimalFood
}

enum SupplyCategoryEnum {
  Food
  Drink
  MedicalSupply
  ShelterMaterial
  Clothing
  PersonalHygieneProducts
  ToolsAndEquipment
  CommunicationDevices
  CleaningProducts
  PowerSources
  CookingSupplies
  EducationalMaterials
  ConstructionMaterials
  AnimalSupplies
}

enum VolunteerTypeEnum {
  Carrier
}

enum VolunteerCategoryEnum {
  Management
  Labor
}

enum UrgencyEnum {
  Low
  Medium
  High
}

model Notification {
  id        Int    @id @default(autoincrement())
  title     String
  body      String
  recipient String
}

model HelpCenter {
  id   Int    @id @default(autoincrement())
  name String

  /// [StartEndDate]
  busiestHours Json

  /// [StartEndDate]
  openCloseInfo Json

  /// [Location]
  location Json

  /// [ContactInfo]
  contactInfo Json

  city                String   @default("Ankara")
  country             String   @default("Turkey")
  additionalInfo      String
  volunteerCapacity   Int
  helpCenterImageUrls String[]

  coordinator         HelpCenterCoordinator? // Might be unassigned
  volunteersFollowing VolunteersFollowingHelpCenters[]
  qrCode              QrCode?
  volunteerTeams      VolunteerTeam[]
  neededVolunteers    NeededVolunteer[]
  neededSupply        NeededSupply[]
  supply              Supply[]
  volunteers          Volunteer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Many-to-many relation between HelpCenter and Volunteer
model VolunteersFollowingHelpCenters {
  id Int @id @default(autoincrement())

  helpCenterId Int
  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])

  volunteerId Int
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])

  createdAt DateTime @default(now())

  @@unique([helpCenterId, volunteerId])
}

model QrCode {
  id   Int    @id @default(autoincrement())
  uuid String @unique

  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])
  helpCenterId Int        @unique

  createdAt DateTime @default(now())
}

// Supply model and supply related models
model Supply {
  id       Int @id @default(autoincrement())
  quantity Int

  supplyTypeName     SupplyTypeEnum
  supplyTypeCategory SupplyCategoryEnum
  supplyType         SupplyType         @relation(fields: [supplyTypeName, supplyTypeCategory], references: [typeName, category])

  helpCenterId Int
  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NeededSupply {
  id Int @id @default(autoincrement())

  quantity Int
  urgency  UrgencyEnum?

  supplyTypeName     SupplyTypeEnum
  supplyTypeCategory SupplyCategoryEnum
  supplyType         SupplyType         @relation(fields: [supplyTypeName, supplyTypeCategory], references: [typeName, category])

  helpCenterId Int
  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplyType {
  typeName SupplyTypeEnum
  category SupplyCategoryEnum

  supplyReferences       Supply[]
  neededSupplyReferences NeededSupply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([typeName, category])
}

model NeededVolunteer {
  id Int @id @default(autoincrement())

  quantity Int
  urgency  UrgencyEnum?

  // one-to-many relationship between NeededVolunteer and VolunteerType
  volunteerTypeName     VolunteerTypeEnum
  volunteerTypeCategory VolunteerCategoryEnum
  volunteerType         VolunteerType         @relation(fields: [volunteerTypeName, volunteerTypeCategory], references: [typeName, category])

  // one-to-many relationship between HelpCenter and NeededVolunteer
  helpCenterId Int
  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User model and other user related models
model User {
  id Int @id @default(autoincrement())

  firstname       String
  surname         String
  email           String  @unique
  phone           String? @unique
  password        String
  profileImageUrl String? @default("")

  isEmailConfirmed   Boolean @default(false)
  activationCode     String  @default("")
  hashedRefreshToken String?

  userRole  UserRolesOnUsers[]
  volunteer Volunteer?
  admin     Admin?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRolesOnUsers {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  userRole     UserRole @relation(fields: [userRoleName], references: [roleName])
  userRoleName String

  assignedAt DateTime @default(now())

  // TODO: Add assigned by field here

  @@id([userId, userRoleName])
}

model UserRole {
  id       Int    @id @default(autoincrement())
  roleName String @unique // Volunteer, Admin, Superadmin, ...

  users       UserRolesOnUsers[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// For many-to many relation between UserRole and Permission
model RolePermission {
  id Int @id @default(autoincrement())

  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])

  roleId Int
  role   UserRole @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id Int @id @default(autoincrement())

  roles RolePermission[]

  permissionName String // User will see
  permissionKey  String // Behind the scenes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User Roles
model Volunteer {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // one-to-many relationship between Volunteer and VolunteerType
  volunteerTypeName     VolunteerTypeEnum?
  volunteerTypeCategory VolunteerCategoryEnum?
  volunteerType         VolunteerType?         @relation(fields: [volunteerTypeName, volunteerTypeCategory], references: [typeName, category])

  // Volunteers will be assigned to teams, but they might be unassigned.
  volunteerTeamId Int?
  volunteerTeam   VolunteerTeam? @relation(fields: [volunteerTeamId], references: [id])

  helpCenterId Int?
  helpCenter   HelpCenter? @relation(fields: [helpCenterId], references: [id])

  followedHelpCenters VolunteersFollowingHelpCenters[]
  certificates Certificate[]

  // These only exist if the volunteer is a team leader or a coordinator
  volunteerTeamLeader   VolunteerTeamLeader?
  helpCenterCoordinator HelpCenterCoordinator?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id Int @id @default(autoincrement())

  name           String
  certificateUrl String
  issuer         String
  issueDate      DateTime

  volunteerId Int
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Identitifed by type, category, and help center so that there won't be separate types of volunteers at each help center
model GuestVolunteer {
  id Int @id @default(autoincrement())

  quantity Int

  volunteerTypeName     VolunteerTypeEnum
  volunteerTypeCategory VolunteerCategoryEnum
  volunteerType         VolunteerType         @relation(fields: [volunteerTypeName, volunteerTypeCategory], references: [typeName, category])

  // one-to-many relationship between HelpCenter and Volunteer
  volunteerTeamId Int           @unique
  volunteerTeam   VolunteerTeam @relation(fields: [volunteerTeamId], references: [id])

  // Each volunteer team will have a type-category pairing once
  @@unique([volunteerTypeName, volunteerTypeCategory, volunteerTeamId])
}

model VolunteerType {
  typeName VolunteerTypeEnum
  category VolunteerCategoryEnum

  volunteers       Volunteer[]
  neededVolunteers NeededVolunteer[]
  guestVolunteers  GuestVolunteer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([typeName, category])
}

model VolunteerTeamLeader {
  id Int @id @default(autoincrement())

  volunteerId Int       @unique
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])

  volunteerTeam   VolunteerTeam @relation(fields: [volunteerTeamId], references: [id])
  volunteerTeamId Int           @unique
}

model HelpCenterCoordinator {
  id Int @id @default(autoincrement())

  volunteerId Int       @unique
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])

  // one-to-many relationship between HelpCenter and NeededVolunteer
  helpCenterId Int        @unique
  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])
}

model Admin {
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VolunteerTeam {
  id Int @id @default(autoincrement())

  teamName String?

  // one-to-many relationship between HelpCenter and Volunteer
  helpCenterId Int
  helpCenter   HelpCenter @relation(fields: [helpCenterId], references: [id])

  teamLeader     VolunteerTeamLeader? // Might be unassigned
  guestVolunteer GuestVolunteer[]
  volunteers     Volunteer[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([helpCenterId, teamName])
}
